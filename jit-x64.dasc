#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256

typedef struct _LOOP_OPT_INFO {
    int total_offset;
    int count;
    int offset[256];
    int mul_value[256];
} loop_opt_info_t;

int continuous_count(char *p);
int check_loop(char *p, loop_opt_info_t *info);

int main(int argc, char *argv[])
{
    if (argc < 2) err("Usage: jit-x64 <inputfile>");
    dasm_State *state;
    initjit(&state, actions);

    unsigned int maxpc = 0;
    int pcstack[MAX_NESTING];
    int *top = pcstack, *limit = pcstack + MAX_NESTING;

    loop_opt_info_t loop_opt;
    int count = 0;

    // Function prologue.
    |  push PTR
    |  mov  PTR, rdi      // rdi store 1st argument

    for (char *p = read_file(argv[1]); *p; p++) {
        switch (*p) {
            case '>':
                count = continuous_count(p);
                p += count - 1;
                |  add  PTR, count
                break;
            case '<':
                count = continuous_count(p);
                p += count - 1;
                |  sub  PTR, count
                break;
            case '+':
                count = continuous_count(p);
                p += count - 1;
                |  add  byte [PTR], count
                break;
            case '-':
                count = continuous_count(p);
                p += count - 1;
                |  sub  byte [PTR], count
                break;
            case '.':
                |  movzx edi, byte [PTR]
                |  callp putchar
                break;
            case ',':
                |  callp getchar
                |  mov   byte [PTR], al
                break;
            case '[':
                if (top == limit) err("Nesting too deep.");
                if (check_loop(p, &loop_opt)) {
                    if (loop_opt.count == 0) {
                        |  mov byte [PTR], 0
                    } else {
                        |  mov r12w, word [PTR]
                        for (int i = 0; i < loop_opt.count; ++i) {
                            |  mov r13w, loop_opt.mul_value[i]
                            |  imul r13w, r12w
                            |  add PTR, loop_opt.offset[i]
                            |  add byte [PTR], r13b
                            |  sub PTR, loop_opt.offset[i]
                        }
                        |  mov byte [PTR], 0
                    }
                    p += loop_opt.total_offset - 1;
                    break;
                }
                // Each loop gets two pclabels: at the beginning and end.
                // We store pclabel offsets in a stack to link the loop
                // begin and end together.
                maxpc += 2;
                *top++ = maxpc;
                dasm_growpc(&state, maxpc);
                |  cmp  byte [PTR], 0
                |  je   =>(maxpc-2)
                |=>(maxpc-1):
                break;
            case ']':
                if (top == pcstack) err("Unmatched ']'");
                top--;
                |  cmp  byte [PTR], 0
                |  jne  =>(*top-1)
                |=>(*top-2):
                break;
        }
    }

    // Function epilogue.
    |  pop  PTR
    |  ret

    void (*fptr)(char*) = jitcode(&state);
    char *mem = calloc(30000, 1);
    fptr(mem);
    free(mem);
    free_jitcode(fptr);
    return 0;
}

int continuous_count(char *p)
{
    char *ptr = p;
    int count = 0;
    while (*ptr == *p) {
        ++count;
        ++ptr;
    }
    return count;
}

int check_loop(char *p, loop_opt_info_t *info)
{
    int count = 0, offset = 0;

    info->count = 0;
    info->total_offset = 2;
    if (*(p + 1) != '-') {
        return 0;
    }

    p += 2;
    while (*p != ']') {
        if (*p != '+' && *p != '<' && *p != '>') {
            return 0;
        }

        count = continuous_count(p);
        if (*p == '+') {
            info->offset[info->count] = offset;
            info->mul_value[info->count++] = count;
        } else if (*p == '<') {
            offset -= count;
        } else if (*p == '>') {
            offset += count;
        }
        info->total_offset += count;
        p += count;
    }
    ++info->total_offset;

    return (offset == 0);
}
